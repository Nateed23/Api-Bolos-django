# Generated by Django 5.2.3 on 2025-07-24 03:52

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Bolo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=60)),
                ('preco', models.DecimalField(decimal_places=2, max_digits=6)),
                ('descricao', models.TextField()),
                ('disponivel', models.BooleanField(default=True, help_text='marque se esta disponivel ')),
                ('imagem', models.ImageField(blank=True, null=True, upload_to='bolos/')),
            ],
            options={
                'verbose_name': 'Bolo',
                'verbose_name_plural': 'Bolos',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('telefone', models.CharField(max_length=24, verbose_name='telefone')),
                ('cep', models.CharField(max_length=9, verbose_name='cep')),
                ('logradouro', models.CharField(max_length=120, verbose_name='Logradouro')),
                ('numero', models.CharField(max_length=20, verbose_name='numero')),
                ('complemento', models.CharField(blank=True, max_length=150, null=True, verbose_name='complemento')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Pedido',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_pedido', models.DateTimeField(auto_now_add=True)),
                ('data_entrega', models.DateField(help_text='Data de Entrega da Encomenda')),
                ('valor_total', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('cep_entrega', models.CharField(max_length=9, verbose_name='Cep de entrega')),
                ('logradouro_entrega', models.CharField(max_length=150, verbose_name='Logradouro de Entrega')),
                ('numero_entrega', models.CharField(max_length=20, verbose_name='Numero da entrega')),
                ('complemento_entrega', models.CharField(blank=True, max_length=150, null=True, verbose_name='Complemento da entrega')),
                ('status', models.CharField(choices=[('em_preparo', 'em preparo'), ('entregue', 'Entregue'), ('cancelado', 'Cancelado'), ('aguardando_pagamento', 'Aguardando pagamento')], default='aguardando_pagamento', max_length=30)),
                ('forma_pagamento', models.CharField(choices=[('pix', 'PIX'), ('dinheiro', 'DINHEIRO'), ('cartao', 'cartão credito/debito')], default='pix', max_length=8)),
                ('cliente', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pedidos', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'pedido',
                'verbose_name_plural': 'Pedidos',
                'ordering': ['-data_pedido'],
            },
        ),
        migrations.CreateModel(
            name='ItemPedido',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantidade', models.PositiveIntegerField(default=1)),
                ('preco_unitario', models.DecimalField(decimal_places=2, help_text='preço do bolo no momento da compra', max_digits=8)),
                ('bolo', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='itens_pedidos', to='bolos_pedidos.bolo')),
                ('pedido', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='itens', to='bolos_pedidos.pedido')),
            ],
            options={
                'verbose_name': 'Item do pedido',
                'verbose_name_plural': 'Itens do pedido',
                'unique_together': {('pedido', 'bolo')},
            },
        ),
    ]
